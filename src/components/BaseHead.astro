---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import type { ImageMetadata } from 'astro';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import { SITE_TITLE } from '../consts';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage } = Astro.props;
---


<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Early theme init to avoid FOUC and ensure correct theme on first paint -->
<script>
	(function(){
		try {
			const pref = localStorage.getItem('theme');
			if (pref === 'light' || pref === 'dark') {
				document.documentElement.setAttribute('data-theme', pref);
				return;
			}
			const prefersLight = window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches;
			if (prefersLight) document.documentElement.setAttribute('data-theme', 'light');
		} catch {}
	})();

// Function to fix a single URL
function fixUrl(url) {
  // Check if the URL is an internal, absolute path
  if (url.startsWith('/') && !url.startsWith('//')) {
    // Get the base path from the current URL
    const basePath = window.location.pathname.split('/')[1];

    // Check if the link already includes the base path
    if (url.startsWith(`/${basePath}/`)) {
      return url; // Already correct
    }

    // Prepend the base path
    return `/${basePath}${url}`;
  }
  return url; // Return as is for external or relative links
}

// Function to fix all links on the page
function fixAllLinks() {
  const links = document.querySelectorAll('a[href]');
  links.forEach(link => {
    link.href = fixUrl(link.getAttribute('href'));
  });

  const fontLinks = document.querySelectorAll('link[href]');
  fontLinks.forEach(link => {
    if (link.href.includes('/fonts/')) {
      link.href = fixUrl(link.getAttribute('href'));
    }
  });
}

// Run the function when the page loads
document.addEventListener('DOMContentLoaded', fixAllLinks);
	</script>

<!-- Font preloads -->
<!-- <link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin /> -->
<link rel="preload" href="/fonts/JetBrainsMono-Regular.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/JetBrainsMono-Bold.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/JetBrainsMono-Italic.woff2" as="font" type="font/woff2" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />
